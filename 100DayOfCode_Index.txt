Dia 1 :
    tempo: 2h 40 min
    - Introdução ao JavaScript
    - Estudos sobre terminal do windows
    - Download do Node.js, VsCode, Code Runner
    - Comunicação do VsCode com o GitHub
    - Conceitos de Sentença de Código
    - Como comentar em Js // /**/
    - Estudo sobre Bloco de Código
        - Definido por { }
    - Introdução ao Conceito de Dados
        - var
        - let
        - const


Dia 2  :
    tempo: 1h 35 min

    - Importância de se escolher bons identificadores para suas variáveis, funções, arquivos
        -Escolher bons nomes fazem com que o código se torne mais legível
    - Concatenação de string usando +
    - Tipos de dados básicos no Js:
        - number: inteiro, ponto flutuante
        - boolean: Verdadeiro ou Falso
        - string: texto
    - Algoritmo: Sequência lógica de passos a fim de selecionar uma determinada tarefa
        - Pode possuir Repetição
        - Pode possuir uma Decisão
        - Um mesmo conjunto de passos pode gerar sequências com resultados diferentes podendo acarretar em bugs
    - O que são estrutura de dados:
        - Visas organizar e administrar  um conjunto de dados
        - Lista
        - FIFO -> fila
        - LIFO -> pilha
        - Árvore
        - Tabela
    - JsFiddle
    - Estudo mais detalhado sobre o tipo number
    - Estudo mais detalhado sobre o tipo string
        - Template String


Dia 3  :
    tempo: 30 min 

        - Estudo de variaveis booleanas mais detalhado
        - Estudo de um Array
            -Array é heterogeno : Fracamente tipada
            -Pode ter tamanho variados
      - Estudo da estrutura Objeto
      - Diferenciação entre objeto em js e json


Dia 4  :
    tempo: 1 h
    - Diferença entre null e undefined
    - Em js a atribuição de objetos é por referência 
    - Em js a atribuição de variaveis basicas (tipos primitivos) é por valor
    - Estudo de função : tudo é função
        - função é um bloco de codigo nomeado que pode ser repetida varias vezes, que recebe um conjunto de parametros de entradas
          (podendo ser um conjunto vazio) e realiza uma determinada tarefa retonando ou não resultado
    - Estudo sobre Var e let
        - todo var é global a menos que seja determinado dentro de função
        - todo let tem escobo de bloco
    - função tem consciencia do local onde foi definida
    - Hoisting
    - Diferença entre Função e Objetivo


Dia 5  :
    tempo: 1 h 45  min
    - Conceito de Par chave e valor
    - Conceito de contexto léxico: Espaço de abrangencia de uma variavel
    - Objeto são um grupo animnhado de pares chave e valor
    - Acessar variaveis e funções membros de um objeto ou função atraves da notação ponto
    - Operadores:
        - Atribuição:
                    * = -> atribuição comum , guarda um determinado dado em uma variavel;
                    * += -> atribuição com soma ,guarda um determinado dado em uma variavel somando o valor que já estava contido na variavel anteriormente;
                    * -= -> atribuição com subtração ,guarda um determinado dado em uma variavel subtraindo o valor que já estava contido na variavel anteriormente;
                    * *= -> atribuição com produto ,guarda um determinado dado em uma variavel multiplicando o valor que já estava contido na variavel anteriormente;
                    * /= -> atribuição com divisão ,guarda um determinado dado em uma variavel dividindo o valor que já estava contido na variavel anteriormente;
                    * %= -> atribuição modular , guarda o modulo de um dado pelo valor que já estava contido na variavel anteriormente;
        - Destructuring:
                        * Atraves de objeto
                        * Atraves de um Array
        - Aritiméticos : +,-,*,/ e % (modulo) : Operador binario : possui dois operandos
        - Relacionais : Sempre retorna verdadeiro ou Falso
                        * == : Compara valores sem se preocupar com o tipo
                        * === : Compara valores considerando o tipo
                        *!= : Compara valores sem se preocupar com o tipo 
                        *!== : Compara valores considerando o tipo
                        *<   : maior que
                        *>   : menor que
                        *<=  : maior igual
                        *>=  : menor igual
                        obs: null==undefined => true
                             undefined==null => false 
        - Lógicos : ||-> ou 
                  : && -> e
                  : ! ->  negação logica

        -Unário: pode ser prefixado ou pósfixados
                ++ : soma um ao valor
                -- : subtrai um ao valor
        - Tenário: Substitui if e else
        - try,catch,throw


Dia 6  :
    tempo:1 h
    -   Estruturas de controle:
        - IF
        - IF ELSE
        - Switch
    -  Estruturas de Repetição:
        - While :  repetição com uma quantidade indeterminadas de vezes
        - Do While : repetição que obriga um bloco de codigo a ser execultado ao menos uma vezes
        - For : Repetição de um bloco de codigo um numero fixo de vezes
        - For in => for(i in range) pode ser usado em objetos e vetores
        - Break =>quebra uma estrutura de repetição ou no Switch
    - Teste do GitHub


Dia 7  :
    tempo:1 h e 10 min

    -   Função
        - funções pode ser trada como um dado
        - Paradigma funcional
        - Declaração de funções:
            - Forma literal / padrão
            - Função em varivael
            - Armazenar num array
            - Armazenar num atributo de um objeto
            - Passar uma função como parametro de função
            - Uma função pode retornar/conter uma função
        - Parametros variaveis
        - Parametro padrão
        - this : pode alterar dependendendo de quem chama a função
            - Utiliza-se o bind para resolver esse problema
        -Função Arrow: Especialista,Reduzida e com this constante


Dia 8  :
    tempo:1 h 
    
    - Lista de Exercício


Dia 9  :
    tempo:1 h 15min

    - Funções anonimas
    - Funções que recebe outra como parametro
    - Callback (ainda não entendi direito)
    - Função Construtuora :  funciona como uma classe em C# e C++
    - Funções em Js tem consciência do local onde é declarada e carrega essa informação ao ser execultada
    - Closure é o escopo criado quando uma função é declarada, esse escopo permite a função acessar e
     manipular variaves externas à função relacionada com o contexto léxico da função
    - Funções Factory
    -Classe x Factury x Função Construtuora


Dia 10  :
    tempo: 45 min

    - Devemos fugir do escopo global
    - IIFE: Immediately Invoked Function Expression
    - Historia de Paradigma orientada a objeta
        - Paradigma não estrutural => Go to
        - Paradigma estrutural
        - Paradigma Procedural
        - Paradigma OO
            - Principios:
                - Abstração: simplificação de algo do mundo real para o programa com base nos dados interessantes para o sistema
                - Encapsulamento: Interface simples onde a implementação não necessariamente ser conhecida
                - Herança
                - Polimorfismo
            - Objeto é uma coleçao dinamica de pares chave e valor
            - Os valores podem ter objetos internos e arrays
            - 



        
